---

###
# Set field
# Remove field

- ansible.builtin.set_fact:
    prevent_overwrite: "{{ (item_field.prevent_overwrite is defined) and (item_field.prevent_overwrite) }}"
    remove: "{{ (item_field.remove is defined) and (item_field.remove) }}"
    field_section_prefix: "{{ section_prefix }}"
    section_exists: "{{ (item_field.section is defined) and (item_field.section != '') }}"
    field_exists: "{{ (item_field.field is defined) and (item_field.field != '') }}"

- ansible.builtin.set_fact:
    section_only: "{{ section_exists and not field_exists }}"

- when: section_exists
  ansible.builtin.set_fact:
    field_section_prefix: "{{ item_field.section }}."

- when: field_section_prefix == '.'
  ansible.builtin.set_fact:
    field_section_prefix: ""

- when: vault_utils_1password_debug
  debug: 
    msg: 
    - "prevent_overwrite       {{ prevent_overwrite }}"
    - "remove                  {{ remove }}"
    - "section_exists          {{ section_exists }}"
    - "field_exists            {{ field_exists }}"
    - "section_only            {{ section_only }}"
    - "field_section_prefix    {{ field_section_prefix }}"


- name: Check if field already exists before setting if overwrite is false
  when: not section_only
  ansible.builtin.include_tasks: field_status.yml

- name: Set fields in the vault item
  no_log: true
  when: (not section_only) and (not remove) and ((not prevent_overwrite) or (not item_field_exists))
  ansible.builtin.shell: |
    op item edit '{{ name }}' \
    {{ account_arg | default('') }} {{ vault_arg | default('') }} \
    {{ field_section_prefix | default('') }}{{ item_field.field }}[{{ item_field.type | default('password') }}]='{{ item_field.value }}' \
    < /dev/null 

- name: Remove fields marked for deletion
  when: (not section_only) and remove and item_field_exists
  ansible.builtin.shell: |
    op item edit '{{ name }}' \
    {{ account_arg | default('') }} {{ vault_arg | default('') }} \
    '{{ field_section_prefix | default('') }}{{ item_field.field }}[delete]' \
    < /dev/null 

# Remove section

- name: Fetch item to get fields in a section
  when: section_only and remove 
  ansible.builtin.shell: |
    op item get '{{ name }}' \
    {{ account_arg | default('') }} {{ vault_arg | default('') }} \
    --format json < /dev/null    
  register: fetch_item_output_json

- name: Convert fields to JSON object
  when: section_only and remove 
  ansible.builtin.set_fact:
    item_fields: "{{fetch_item_output_json.stdout | from_json }}"

- name: "Extract field list for section {{item_field.section }}"
  when: section_only and remove 
  ansible.builtin.set_fact:
    section_fields: "{{ item_fields.fields | selectattr('section', 'defined') | list | selectattr('section.label', 'equalto', item_field.section) | list }}"

- name: Remove section marked for deletion, by removing all the fields in it
  when: section_only and remove 
  with_items: "{{ section_fields }}"
  loop_control:
    loop_var: section_field
  ansible.builtin.shell: |
    op item edit '{{ name }}' \
    {{ account_arg | default('') }} {{ vault_arg | default('') }} \
    '{{ field_section_prefix }}{{ section_field.label }}[delete]' \
    < /dev/null 
