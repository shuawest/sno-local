---
# Client host / hypervisor for Single-Node OpenShift 

# Name of the target cluster ansible hostname 
# - each has host_vars definition
# - when working with multiple clusters, you can switch when calling playbooks using:
#     ./ap.sh playbook/provision.yml --extra-vars "target_cluster=othercluster"
cluster_name: snolocal

# Choose your vault type
# - 1password   - pull secrets from 1Password
# - ansible     - pull secrets from ansible vault
# - insecure    - pull secrets from variables in your inventory 
# - see CONTRIBUTING.md if you want to send PRs for others
vault_type: 1password  

# Configure the 1Password account and vault name to use for writing secrets
# - it is recommended ot use a separate account for automation so that automation can't get to your other secrets
# - the vault is the group within 1Password where items are created and fetched
onepass_enabled: "{{ vault_type == '1password' }}"
onepass_account: my.1password.com
onepass_vault: MILabs.io

onepass_aws_admin_vault_item: aws-route53-admin
onepass_aws_admin_access_key_field: route53_owner_access_key
onepass_aws_admin_secret_field: route53_owner_secret

onepass_route53_subdomain_user_field: route53_subdomain_user
onepass_route53_subdomain_access_key_field: route53_subdomain_access_key
onepass_route53_subdomain_secret_field: route53_subdomain_secret
onepass_route53_subdomain_user_arn: route53_subdomain_user_arn

onepass_ssh_key_public_field: ssh_key_public
onepass_ssh_key_private_field: ssh_key_private

onepass_pull_secret_field: openshift_pull_secret_base64
onepass_github_pat_field: github_pat

# Git service
# - currently only github is automated so far
# - see CONTRIBUTING.md if you want to send PRs for others
git_service: github


##
# Inferred and default configuration 
# - you should not need to modify the below variables

# Top level cluster definition object name
definition_name: instance

# Get the cluster definition object from the host_vars file based on the cluster_name
cluster: "{{ hostvars[ cluster_name ][ definition_name ] }}"
cluster_full_name: "{{ cluster.cluster_name }}.{{ cluster.subdomain }}.{{ cluster.hostedzone }}"
onepass_cluster_item: "{{ hostvars[ cluster_name ][ 'onepass_vault_item' ] }}"
onepass_cluster_section: "subdomain-{{ cluster.subdomain }}.{{ cluster.hostedzone }}"

ssh_key_public: "{{ hostvars[ cluster_name ][ 'ssh_key_public' ] }}"
ssh_key_private: "{{ hostvars[ cluster_name ][ 'ssh_key_private' ] }}"


# TODO: resolve this using ansible instead
# Define the type of host you are running SNO Local on
# - apple_silicon   - MacBook Pro or Air with M series apple silicon chips
# - apple_intel     - MacBook Pro or Air with intel x86_64 chips
# - linux_x86_64    - Fedora or RHEL with x86_64 chip
#client_type: apple_silicon  
